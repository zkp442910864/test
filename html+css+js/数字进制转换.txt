转十进制
    按规律
        y * (Math.pow(x, n + 1) / x)
        y: 位数对应的值
        x: 当前的进制
        n: 数值的位数

    二进制 → 十进制
        101011
        1. 第0位 1 x 2^0 = 1；
        2. 第1位 1 x 2^1 = 2；
        3. 第2位 0 x 2^2 = 0；
        4. 第3位 1 x 2^3 = 8；
        5. 第4位 0 x 2^4 = 0；
        6. 第5位 1 x 2^5 = 32；
        7. 读数，把结果值相加，1+2+0+8+0+32=43，即101011=43。

    八进制 → 十进制
        以此类推

    十六进制 → 十进制
        以此类推

    const numObj = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15
    }

    function aaa (num, cur, target) {
        const str = num.toString().split('').reverse();
        let newNum = 0;
        for (let i in str) {
            const val = numObj[str[i]];
            newNum += (val * (Math.pow(cur, Number(i) + 1) / cur))
        }
        return newNum;
    }