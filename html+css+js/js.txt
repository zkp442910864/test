














技巧
    当内置的对象自带方法不满足时，可以通过 prototype 原型来给对象添加方法

    过滤节点，取得需要的
    var ul = document.getElementById("myList");
    var items = ul.getElementsByTagName("li");

    循环跳出
        break 语句用于跳出循环。
        continue 用于跳过循环中的一个迭代。

    instanceof      操作符
    typeof          操作符
    in              操作符
        判断对象是否包含key 如：'d' in obj
        判断数组是否包含index 如：0 in arr
        返回true，false

    contenteditable 属性		规定元素内容是否是可编辑的
	    例:<div contenteditable></div>  内容可编辑

    .disabled {pointer-events: none;}
        这个样式可以禁止掉所有事件

    正则
        '19930826'.replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3');       // "1993-08-26"
        '19930826232'.replace(/(\d{4})/g, '$1 ');       // "1993 0826 232"




异常错误
    throw 语句创建自定义错误。
    try{
        if(x=="")throw "empty";//这里条件满足，抛出错误
    }catch(err){
        console.log(err);//打印的是empty
    }





JavaScript 对象
    值类型 String、Number、Boolean、undefined、null
    引用类型 Objec、Array、Date、RegExp、Function

    Array 数组操作
        Array.prototype 			允许你向数组对象添加属性或方法。例：Array.prototype.aa = function(){}

        var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];

        Array.isArray(arr)          判断是否数组

        arr.concat()				连接两个或更多的数组，并返回结果
        arr.every()					检测数值元素的每个元素是否都符合条件。例：arr.every(function(a){return a>=1}) 返回true或false
        arr.some()					基本同上(这只需要一个相等)
        arr.filter()				检测数值元素，并返回符合条件所有元素的数组。例：arr.filter(function(a){return a>=1}) 返回新数组
        arr.find()					返回指定的第一个值。例：arr.find(function(a){return a==2}) 当有等于2时，返回所有2中的第一个，否则undefined
        arr.findIndex() 			返回指定值的第一个索引。例：arr.findIndex(function(a){return a==2}) 当有等于2时，返回所有2中的第一个索引，否则-1
        arr.forEach()				数组每个元素都执行一次回调函数。方法用于调用数组的每个元素，并将元素传递给回调函数。例：arr.forEach(function(item,index){console.log(item)})
        arr.indexOf()				搜索数组中的元素，并返回它所在的位置。返回指定值首次出现的索引。例：arr.indexOf("Apple");有则返回索引，否则-1
        arr.lastIndexOf()			基本同上，这是从后面开始。
        arr.join()					把数组的所有元素放入一个字符串，默认以逗号隔开,传参以参数为准。例：arr.join();
        arr.toString()				同上
        arr.valueOf()				同上
        arr.map()					通过指定函数处理数组的每个元素，并返回处理后的数组。
        arr.pop()					删除数组的最后一个元素并返回删除的元素。
        arr.push()					向数组的末尾添加一个或更多元素，并返回新的长度。
        arr.reduce()				将数组元素计算为一个值（从左到右）。例：arr.reduce(function(total, num){return total+num}) 
            [{a:1},{a:1},{a:1}].reduce((a,b) => ((typeof a === 'number' ? a : a.a) + b.a))
            arr =  [1, 2, 3, 412, 123, 12, 223, 12, 323, 5123, 4];
            [aa, bb] = arr.reduce((a, b) => {
                if (b > 10) {
                    a[0].push(b);return a;    
                }
                a[1].push(b);return a;
            }, [[], []]);
        arr.reduceRight()			将数组元素计算为一个值（从右到左）。
        arr.reverse()				反转数组的元素顺序。
        arr.shift()					删除并返回数组的第一个元素。
        arr.sort()					对数组的元素进行排序。 （注意：自定义的函数里返回的 不是true或false， 是正负值或0，才能起效果）
            对 进行对象数组排序，可以根据对象里的值进行排序
            var arr = [{a:3},{a:6}];
            arr.sort(function(a,b){
                return a.a - b.a
            })

        arr.slice()                 截取数组，接收两个值 开始和结束
            data.slice(num * count - num, num * count);

        arr.splice()				从数组中添加或删除元素,并返回添加或删除的数组给你
            array.splice(index,howmany,item1,.....,itemX)
            index插入的位置，必需
            howmany是否删除当前位置的值，不0，是1，必需
            item1插入的值，可多个，可选
        arr.unshift()				向数组的开头添加一个或更多元素，并返回新的长度。

    Date 对象 时间操作
        静态方法
            Date.parse()					接收一个表示日期的字符串参数，然后尝试根据这个字符串返回相应日期的毫秒数
            Date.UTC()						参数分别是 y,m(一月是0，二月是1，以此类推),d,h,m,s, 返回相应日期的毫秒数
                                                            new Date(Date.UTC(2008, 11, 31)).toLocaleDateString()
            Date.now()						取得当前时间的时间戳

        对象上的实例方法
            getFullYear()			从 Date 对象以四位数字返回年份。
            getMonth()				从 Date 对象返回月份 (0 ~ 11)。
            getDate()				从 Date 对象返回一个月中的某一天 (1 ~ 31)。
            getHours()				返回 Date 对象的小时 (0 ~ 23)。
            getMinutes()			返回 Date 对象的分钟 (0 ~ 59)。
            getMilliseconds()		返回 Date 对象的毫秒(0 ~ 999)。

            getDay()				从 Date 对象返回一周中的某一天 (0 ~ 6)。
            getTime()				返回 1970 年 1 月 1 日至今的毫秒数。时间戳
            toISOString()			使用 ISO 标准返回字符串的日期格式。new Date().toISOString();
            toLocaleDateString() 	根据本地时间格式，把 Date 对象的日期部分转换为字符串。new Date().toLocaleDateString();
            toLocaleTimeString()	根据本地时间格式，把 Date 对象的时间部分转换为字符串。new Date().toLocaleTimeString();
            toLocaleString()		据本地时间格式，把 Date 对象转换为字符串。

            setFullYear()			
            setMonth()				
            setDate()				
            setHours()				
            setMinutes()			
            setMilliseconds()
            setTime()

    Math 对象 （对数值的操作）
        都是静态属性和方法
        Math.E					自然对数的底数，即常量e的值
        Math.LN10				10的自然对数
        Math.LN2				2的自然对数
        Math.LOG2E				以2为底e的对数
        Math.LOG10E				以10为底e的对数
        Math.PI					π的值
        Math.SQRT1_2			1/2的平方根（即2的平方根的倒数）
        Math.SQRT2				2的平方根

        如果要从数组中找的话，可以用 apply()
            Math.max.apply(Math, [1,2,3,4,56,7])
            Math.max()				返回参数中最大的值
            Math.min()				返回参数中最小的值

        Math.abs(num)			返回num 的绝对值
        Math.asin(x)			返回x 的反正弦值
        Math.exp(num)			返回Math.E 的num 次幂
        Math.atan(x)			返回x 的反正切值
        Math.log(num)			返回num 的自然对数
        Math.atan2(y,x)			返回y/x 的反正切值
        Math.pow(num,power)		返回num 的power 次幂
        Math.cos(x)				返回x 的余弦值
        Math.sqrt(num)			返回num 的平方根
        Math.sin(x)				返回x 的正弦值
        Math.acos(x)			返回x 的反余弦值
        Math.tan(x)				返回x 的正切值
        
        Math.ceil(x)			对数进行上舍入。
        Math.floor(x)			对 x 进行下舍入。
        Math.round(x)			把数四舍五入为最接近的整数。
        Math.random()			返回 0 ~ 1 之间的随机数。
            Math.floor(Math.random() * 8 + 2) // 获取 2-8 之间的数，通过修改2和8，来改范围

    Number 对象
        (1.123123).toFixed(x)			指定小数为x位。
        (1.123123).toExponential(x)		指定小数为x位,带e表示
        (1.123123).toPrecision()
        Number.parseFloat(x)            x 被转成浮点数的值
        Number.parseInt(x)              x 被转成整数的值
        Number()                        把非数值转换为数值（上两个也有同样的效果）
    
    String 对象
        String.fromCharCode()	静态方法，把 ascii码 转换为字符串

        var str = 'abcd';

        str.charAt()				返回在指定位置的字符。
        str.charCodeAt() 			返回在指定的位置的字符的 Unicode 编码。
        str.concat()				连接两个或更多字符串，并返回新的字符串。

        第一个参数是查找的字符串，第二个参数都是指定开始的位置 (查找指定字符，返回索引)
        str.indexOf()				头开始，返回指定字符串第一次出现的索引，没有返回-1
        str.lastIndexOf()			基本同上，尾开始

        以下三个都是截取字符串，并返回
        传入的负值与字符串的长度相加，得到的位置index
        str.slice()					提取字符串的片断，并在新的字符串中返回被提取的部分。例：str.slice(1,5);
        str.substring(s,e)			基本同上。所有负值转化为 0
        str.substr(s,e)				基本同上。e指定的是个数(当为负时转化为 0)	版本 < ie9 传负值有问题
            var stringValue = "hello world";
            alert(stringValue.substr(3, 7)); 	//"lo worl"
        
        转换大小写
        str.toLowerCase()			把字符串转换为小写。
        str.toLocaleLowerCase()		基本同上，针对地区的(使用针对地区的方法更稳妥一些)。
        str.toUpperCase()			把字符串转换为大写。
        str.toLocaleUpperCase()		基本同上，针对地区的(使用针对地区的方法更稳妥一些)。

        str.trim()					去除字符串两边的空白,并返回新的值
        str.trimLeft()				基本同上，去掉左边的
        str.trimRight()				基本同上，去掉右边的

        str.localeCompare()			比较字符串，判断在当前字符串的前后或相等
            var stringValue = "yellow";
            alert(stringValue.localeCompare("brick")); //前 1
            alert(stringValue.localeCompare("yellow")); //相等 0
            alert(stringValue.localeCompare("zoo")); //后 -1

        一下是支持正则表达式的 String 对象的方法
            str.replace()				在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。例：str.replace(/^\s+|\s+$/g, '')
            str.match()					查找找到一个或多个正则表达式的匹配。例：str.match(/ain/g);
            str.search()				查找与正则表达式相匹配的值。
            str.split()					把字符串分割为数组并返回。第一个参数 分隔符，第二个参数 可以指定返回数据的 length  < ie8 有问题

    RegExp 对象 正则
        静态属性
            RegExp.input			最近一次要匹配的字符串
            RegExp.leftContext		最近一次的匹配项
            RegExp.rightContext		Input字符串中lastMatch之后的文本
            RegExp.lastMatch		最近一次的匹配项
            RegExp.lastParen		最近一次匹配的捕获组
            RegExp.multiline		布尔值，表示是否所有表达式都使用多行模式
            RegExp.$1				RegExp.$1、RegExp.$2...RegExp.$9，分别用于存储第一、第二...第九个匹配的捕获组

        实例方法
            var reg = /\[bc\]at/i;

            reg.toString()			返回正则表达式字符串
            reg.toLocaleString()	返回正则表达式字符串
            reg.valueOf()	        返回正则表达式本身
            reg.test() 		        检索字符串中指定的值,返回 true 或 false。(验证)，例子: /^\s+|\s+$/g.test(str)
            reg.exec()		        检索字符串中指定的值。返回找到的值。例子: str = "Visit W3School"; /W3School/g.exec(str)

        正则的写法
            /pattern(表达式)/flags(标志)
            3 个标志 (可组合使用)
                g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；
                i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；
                m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。

                var pattern1 = /\[bc\]at/i;
                    // 做判断
                    alert(pattern1.global); //false
                    alert(pattern1.ignoreCase); //true
                    alert(pattern1.multiline); //false
                    alert(pattern1.lastIndex); //0
                    alert(pattern1.source); //"\[bc\]at"

    Function 对象
        函数声明 (相当于var的提升作用域)
            率先读取函数声明，并使其在执行任何代码之前可用（可以访问）
            function f(){}

        函数表达式
            至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行 (匿名函数)
            var f = function () {}
        
        call()	 		方法会用它的第一个参数 作为 当前调用call()函数的this指针  例子:var obj={} f.call(obj)
        apply() 		apply()和call()类似的，只是apply()要求第二个参数必须是一个数组。
            这个数组会作为参数传递给目标函数，通过arguments数组来获取  例子:var obj={} f.apply(obj,['q','b','c'])

        name 			获取当前函数的 方法名
        toString()		获取当前函数体的 字符串

        caller			这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为null
            function outer(){inner()};function inner(){alert(inner.caller)};outer();

        bind()          指定this 指向

    Object 对象
        对象属性的操作
            4个属性描述符
                configurable 		判断 能否使用 delete 删除，默认 ture，(设置为 false，严格模式下进行删除会报错)(设置为 false 后，其它的描述符不能在进行修改)
                enumerable	 		判断 是否循环改属性，默认 true
                writable			判断 能否修改改属性，默认 true，(设置为 false，严格模式下进行修改会报错)
                value				属性值，读取写入都是对改描述进行操作，默认 undefined

            2个属性访问器   （一对 getter 和 setter 函数 (不必要的，要做拦截操作可以定义来处理数据，严格模式下必须一对一起定义)）
                get					在读取属性时调用的函数，默认值为undefined
                set					在写入属性时调用的函数，默认值为undefined

            Object.defineProperty(a, b, c)          可以进行修改，a 对象、b Key值、c 要修改的描述符对象 (ie8 及以下不要使用)
            Object.getOwnPropertyDescriptor(a, b)   读取对象里属性的描述，a 对象， b 对象里的Key (ie9 以上可使用)
        
        组合使用 构造函数模式 和 原型模式 (用最广泛、认同度最高的一种创建自定义类型的方法)
            构造函数实现 私有数据
            原型模式实现 共享数据
            function Person(name, age, job){
                this.name = name;this.age = age;
                this.job = job;this.friends = ["Shelby", "Court"];
            }
            Person.prototype = {
                constructor : Person,
                sayName : function () { alert(this.name) }
            }
        
        通过原型链继承
            function SuperType(){ this.property = true }
            function SubType(){ this.subproperty = false }
            SubType.prototype = new SuperType()
            ...
            实现的本质是重写原型对象，代之以一个新类型的实例。
            换句话说，原来存在于 SuperType 的实例中的所有属性和方法，现在也存在于 SubType.prototype 中了。
        
            确定原型和实例的关系
                instanceof 操作符
                isPrototypeOf()方法
                alert(instance instanceof Object); 		//true
                alert(instance instanceof SuperType); 	//true
                alert(instance instanceof SubType); 	//true
                只要是原型链中出现过的原型，都可以说是该原型链所派生的实例的原型，所以都会返回 true

            谨慎地定义方法
                继承时，不管怎样，给原型添加方法的代码一定要放在替换原型的语句之后。
                就是写在上面 原型链 (...) 的那部分

            原型链的问题
                继承的父级中存在引用类型值的问题
                在创建子类型的实例时，不能向超类型的构造函数中传递参数





BOM（是window 对象，也叫 Global对象）
    浏览器对象模型，BOM 提供了很多对象，用于访问浏览器的功能，这些功能与任何网页内容无关。

    window.isNaN()              用来确定一个值是否为NaN。这函数会先把值转为（Number）数值，在进行判断。
    window.isFinite()           判断被传入的参数值是否为一个有限数值。
    window.parseInt()           把非数值转换为数值
    window.parseFloat()         把非数值转换为数值

    url编码
    window.encodeURI()				对链接的中文、空格进行转义 转成: %A4%AB
    window.encodeURIComponent()		对链接的符号和中文、空格进行转义 转成: %A4%AB

    url解码
    window.decodeURI()				对应 encodeURI()，把编码转回原样
    window.decodeURIComponent()		对应 encodeURIComponent()，把编码转回原样

    window.alert()			    提示框
    window.confirm()		    警视框，需要确认进行下一步
    window.prompt()			    一个带文本域的弹窗
    window.print()		        显示“打印”对话框
    window.open()               打开一个窗口
    window.find()		        显示“查找”对话框
    window.eval()			    解析字符串的JavaScript (要小心代码注入)

    window.onload

    window.setTimeout()         一次性定时器
    window.clearTimeout()       清除上面定时器

    window.setInterval()        持续执行定时器
    window.clearInterval()      清除上面定时器

    iframe 的相关操作
        window.top              指向最外层的 window
        window.parent           指向包含改 iframe 的父 window
            window.parent.document  在iframe里可以获取到父窗口
            window.parent.document.getElementsByTagName('iframe')[0]   在iframe里可以获取到当前iframe
    
    浏览器窗口
        窗口位置
            Firefox 不支持下面这两个
            window.screenLeft		浏览器窗口距离左边距离
            window.screenTop		浏览器窗口距离顶部距离

            Safari、Chrome、Firefox 支持一下 api
            window.screenX
            window.screenY

        窗口大小    （ie8 及一下不支持）
            这两个是视口宽高
            window.innerWidth
            window.innerHeight

            这两个是浏览器的宽高
            window.outerWidth
            window.outerHeight
    
    window.location     对象 (路径信息)
        属性：
            hash 		"#contents" 			返回URL中的hash（#号后跟零或多个字符），如果URL中不包含散列，则返回空字符串
            host 		"www.wrox.com:80" 		返回服务器名称和端口号（如果有）
            hostname 	"www.wrox.com" 			返回不带端口号的服务器名称
            href 		"http:/www.wrox.com" 	返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值
            pathname 	"/WileyCDA/" 			返回URL中的目录和（或）文件名
            port 		"8080" 					返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串
            protocol 	"http:" 				返回页面使用的协议。通常是http:或https:
            search 		"?q=javascript" 		返回URL的查询字符串。这个字符串以问号开头

        方法：
            location.assign('url')		改变浏览器的链接
            location.replace('url')		改变浏览器的链接，不会在浏览器历史记录生成记录
            location.reload()			重新加载当前页面。传入 true，强制重新从服务器上请求文件

        把 window.location.search 转为对象
            function getQueryStringArgs () {
                //取得查询字符串并去掉开头的问号
                const str = location.search;
                const qs = str.length > 0 ? str.substr(1) : '';

                //没有值就可以直接跳出了，但是为了不报错，就返回个空对象
                if (!qs.length) {
                    return {};
                }

                //保存数据的对象
                const args = {};

                //取得每一项
                const items = qs.split('&');

                //逐个将每一项添加到 args 对象中
                for (let i in items) {
                    const item = items[i].split('=');
                    const name = item[0];
                    (name && name.length) && (args[name] = item[1]);
                }
                return args;
            }
    
    window.navigator    对象 (浏览器信息)
        navigator.userAgent				浏览器的用户代理字符串，存在于所有浏览器中。

    window.screen       对象 (少用)
        screen 对象中保存着与客户端显示器有关的信息，这些信息一般只用于站点分析。

    window.history      对象 (历史记录信息)
        history.go()		传负数后退，正数前进
            history.go(-1)	//后退一页
            history.go(1)	//前进一页
            history.go(2)	//前进两页
        history.back();		后退一页
        history.forward()	前进一页
        history.length		保存着历史记录的数量





DOM
    DOM（文档对象模型）描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。
    操作已在文档上的节点，该节点将从原来的位置转移到新位置上


    document.documentElement			始终指向HTML 页面中的<html>元素
    document.body						返回html 元素里的body 元素
    document.head						HTML5 新增的 ie9及以上可用 (兼容：document.head || document.getElementsByTagName('head')[0])
    document.title						获取设置文档标题
    document.childNodes					返回文档元素列表
    document.doctype					取得对<!DOCTYPE>的引用（由于浏览器对document.doctype 的支持不一致，因此这个属性的用处很有限。）

    document.anchors			        包含文档中所有带name 特性的<a>元素
    document.forms				        包含文档中所有的<form>元素
    document.images				        包含文档中所有的<img>元素
    document.links				        包含文档中所有带href 特性的<a>元素
    document.applets			        包含文档中所有的<applet>元素

    document.URL						返回上个当前页面的url
    document.domain						返回上个当前页面的域名（可以通过修改这个来，实现主页面和iframe 通信，不同域名的也可以）
    document.referrer					返回上个页面的url
    document.compatMode				    用来确认浏览器的模式  CSS1Compat，标准模式；BackCompat，混杂模式
    document.readyState				    返回文档的加载状态	loading，正在加载文档；complete，已经加载完文档
    document.charset				    表示文档中实际使用的字符集
    document.defaultCharset			    表示根据默认浏览器及操作系统的设置

    document.activeElement			    这个属性始终会引用DOM 中当前获得了焦点的元素。
    document.hasFocus()				    用来判断是否处于交互中。true 时用户正在使用input 之类的，

    document.getElementById()			传入id 获取到元素。如果有相同id 的返回第一个，没有返回null 。
    document.getElementsByTagName()		传入标签名 获取一组元素。
    document.getElementsByName()		传入name 值获取一组元素。
    document.querySelector(a)			a 一个CSS 选择符，返回与该模式匹配的第一个元素，没有返回 null。（IE8 及以上才支持）
    document.querySelectorAll(a)		a 一个CSS 选择符，返回与该模式匹配的一个 NodeList 的实例，没有找到 NodeList 就是空的。（IE8 及以上才支持）
    document.getElementsByClassName(a)	a 一个包含一或多个类名的字符串，返回带有指定类的所有元素的NodeList。（IE9+ 及以上才支持）

    document.createElement(a)			创建元素节点。a 标签名（HTML 文档中不区分大小写），传入标签名生成并返回一个新元素。
    document.createTextNode(a)			创建文本节点。a 一串字符串，传入字符串返回text 节点
    document.createComment(a)			创建注释节点。a 一串字符串，传入字符串返回注释（Comment） 节点
    document.createAttribute()			创建属性节点。传入特性的名称创建新的特性节点
    document.createDocumentFragment()	创建文档片段

    文档写入
        document.write()                可用于直接向 HTML 输出流写内容。
        document.writeln()
        document.open()
        document.close()
					


    var xxx = docuemnt.body

    xxx.ownerDocument			每个节点都有这属性，指向 document。这意味着 任何节点都不能同时存在于两个或更多个文档中

    xxx.nodeType                值 1为元素、2为Attr类型（元素里的属性）、3为Text类型、8为Comment类型（注释节点）
    xxx.nodeName                获取标签名(大写)

    父子、同胞间操作
    xxx.children			        返回所有子元素（ie8及更早的版本会包含注释节点）
    xxx.contains(a)			        a 某个元素，判断值是否属于该元素的子节点，返回布尔值
    xxx.childNodes                  返回所有子节点
    xxx.parentNode			        返回父节点
    xxx.previousSibling		        返回同胞节点，上一个。找不到返回 null
    xxx.nextSibling			        返回同胞节点，下一个。找不到返回 null
    xxx.firstChild			        返回子节点(NodeList)中的第一个。找不到返回 null
    xxx.lastChild			        返回子节点(NodeList)中的最后一个。找不到返回 null
    IE9+ 及以上才支持，以下这些属性会忽略文本节点
    xxx.childElementCount			返回子元素（不包括文本节点和注释）的个数。
    xxx.firstElementChild			指向第一个子元素；firstChild 的元素版。
    xxx.lastElementChild			指向最后一个子元素；lastChild 的元素版。
    xxx.previousElementSibling		指向前一个同辈元素；previousSibling 的元素版。
    xxx.nextElementSibling			指向后一个同辈元素；nextSibling 的元素版。

    以下节点操作，只要不是新创建的元素，都是剪切操作。这几个方法必须先取得父节点（使用parentNode 属性）
    添加、插入、替换、删除。
    xxx.appendChild(a)			    在NodeList 末尾添加一个元素，并返回新增的节点
    xxx.insertBefore(a, b)		    在NodeList 中添加一个元素。a 要插入的节点，b 要插入位置的节点(作为参照的节点)，当b 传null 时，效果同appendChild（要注意 文本节点 ，这也是个位置），并返回新增的节点
        xxx.insertBefore(document.createElement('a'), document.body.lastChild)
    xxx.replaceChild(a, b)		    a插入的节点,b替换的节点，并返回被替换的节点(就是b)
    xxx.removeChild(a)			    a要移除的节点，并返回被删除的节点(就是a)

    xxx.cloneNode()				    复制这个节点
                                    默认浅复制：只会复制这个节点本身，不包含子节点
                                    传true 深复制：包含这个节点本身和子节点

    元素属性（也是节点的一种）读取、操作
    xxx.id					        元素在文档中的唯一标识符
    xxx.className			        与元素的class 特性对应，即为元素指定的CSS类
    xxx.title				        有关元素的附加说明信息，一般通过工具提示条显示出来
    xxx.style				        会返回一个样式对象 （xxx.style.color = 'blue'）
    xxx.attributes                  返回该元素上的所有属性对象

    xxx.getAttribute(a)			    a 属性名，传入要获取的属性名，获取对应的值，不存在返回null。（属性名不区分大小写）// div.getAttribute("id")
    xxx.setAttribute(a, b)		    a 属性名，b 新的值，传入两个参数根据属性名来替换原来的值。（传入的属性名都转为小写）
    xxx.removeAttribute(a)		    a 属性名，传入要对应的属性名，彻底删除元素的特性（不仅会清除特性的值，而且也会从元素中完全删除特性）。IE6 及以前版本不支持

    自定义数据属性 （ie 貌似不支持）
        HTML5 规定可以为元素添加非标准的属性，但要添加前缀data-，目的是为元素提供与渲染无关的信息，或者提供语义信息。
        // <div id="myDiv" data-appId="12345" data-myname="Nicholas"></div>
        var div = document.getElementById("myDiv");
        var appId = div.dataset.appId;
        div.dataset.appId = 23456;
        通过 dataset 的属性可以取值与赋值
    
    xxx.offsetHeight		        （content + padding + border）元素在垂直方向上占用的空间大小，以像素计。包括元素的高度、（可见的）水平滚动条的高度、上边框高度和下边框高度。
    xxx.offsetWidth		            元素在水平方向上占用的空间大小，以像素计。包括元素的宽度、（可见的）垂直滚动条的宽度、左边框宽度和右边框宽度。
    xxx.offsetLeft		            元素的左外边框至包含元素的左内边框之间的像素距离。
    xxx.offsetTop			        元素的上外边框至包含元素的上内边框之间的像素距离。
    xxx.offsetParent		        获取父级元素（注意<td>元素的offsetParent 是作为其祖先元素的<table>元素）

    xxx.clientWidth                 （content + padding ）视口大小
	xxx.clientHeight                视口大小

    xxx.scrollHeight            	在没有滚动条的情况下，元素内容的 总 高度。（文档的整个高度）
    xxx.scrollWidth         		在没有滚动条的情况下，元素内容的 总 宽度。（文档的整个宽度）
    xxx.scrollLeft          		被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置。
    xxx.scrollTop           		被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置。（document.documentElement.scrollTop 获取滚动距离）
    
    xxx.innerHTML		            获取元素下的所有子节点，赋值就替换元素下的所有子节点
    xxx.outerHTML		            返回调用它的元素及所有子节点的HTML 标签，赋值就完全替换调用元素
    xxx.innerText			        获取元素下的所有文本，赋值就替换元素下的所有子节点
    xxx.outerText			        返回调用它的元素及所有子节点的文本，赋值就完全替换调用元素
    xxx.compareDocumentPosition()	确定节点间的关系 (可以参考“JavaScript高级程序设计(第三版)” 11.4.3 )


    getBoundingClientRect() 给出了元素的展示信息
        元素都提供了一个 getBoundingClientRect() 方法。这个方法返回会一个矩形对象，包含4 个属性：left、top、right 和bottom。这些属性给出了元素在页面中相对于视口的位置。
        自测的浏览器（包含6 个属性：left、top、right、bottom、height 和 width）
        id8 及老版本    返回的都是4个属性
            之后的版本  返回的都是6个属性
        document.body.getBoundingClientRect()

    scrollIntoView() 方法 （把内容在视口内显示出来，没有滚动效果）
        可以在所有HTML 元素上调用
        这个方法主要是把内容与视口的 顶部 或 底部 对齐。
        xxx.scrollIntoView(true)	顶部对齐
        xxx.scrollIntoView(false)	底部对齐

    动态脚本
        script.src
        script.type             设置为 text/javascript
        script.text

    动态样式
        link.type               设置为 text/css
        link.href
        link.rel                设置为 stylesheet

    
    注意：操作dom 上要注意它的动态性。





函数表达式
    递归
        var c = 0;
        var dg = (function f () {
            c++;
            console.log(c);
            if (c < 10) f();
        });

    闭包
        了解
            1.执行环境
                在每个函数调用的时候会创建一个 执行环境
            2.作用域链
                在创建 执行环境 后，会有对应的作用域，通过函数的 [[Scopes]] 指向 全局环境对象(this) 和 包含函数参数的 活动对象(arguments)
                从函数里层向外扩展 0、1、2、3、4...
                在 全局环境 中调用函数(指的是普通的函数)，函数位于 1 的位置
            3.销毁
                一般来讲，当函数执行完毕后，执行环境 和 局部活动对象 就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。
        
        当执行的函数，返回一个匿名函数时
            function child () {
                return function () {
                    ...
                }
            }
            var a = child();
            a();
            a = null;
            会按上面的步骤走完，但在第三步时，执行完后 局部活动对象，因为返回 匿名函数 且被 a 引用，所以不会被销毁。 
            当调用 a 函数时，在上面第二步的 作用域链 是这样的，闭包的活动对象、child 的活动对象、全局环境对象
            设置为等于 null 解除该函数的引用，就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，其他作用域（除了全局作用域）也都可以安全地销毁了。

        由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。
        过度使用闭包可能会导致内存占用过多，我们建议读者只在绝对必要时再考虑使用闭包。
        虽然像 V8 等优化后的 JavaScript 引擎会尝试回收被闭包占用的内存，但请大家还是要慎重使用闭包。

        关于 this 对象
            在什么执行环境下，就指向这执行环境。

        内存泄漏
            由于IE9 之前的版本对JScript 对象和COM 对象使用不同的垃圾收集例程，因此闭包在IE 的这些版本中会导致一些特殊的问题。
                function assignHandler(){
                    var element = document.getElementById("someElement");
                    element.onclick = function(){
                        alert(element.id);
                    };
                }
                因为函数中存在匿名函数，会导致匿名函数的活动对象不会被销毁，每次使用事件都会触发对 element 的引用

                function assignHandler(){
                    var element = document.getElementById("someElement");
                    var id = element.id;
                    element.onclick = function(){
                        alert(id);
                    };
                    element = null;
                }
                这样修改后
                    1.赋值给变量后减少了对 element 的引用
                    2.然后 element 不使用后，赋值为 null
                    3.这样就能够解除对 DOM 对象的引用，顺利地减少其引用数，确保正常回收其占用的内存。

        只要函数中存在匿名函数，并被使用着，这就是闭包。






旧的
    元素对象 就是获取到节点后的操作 (节点操作)

    scrollLeft				返回元素左边缘与视图之间的距离。
    scrollTop				返回元素上边缘与视图之间的距离。
    offsetLeft				返回元素的水平偏移位置。
    offsetTop				返回元素的垂直偏移位置。

    clientHeight			返回元素的可见高度。
    clientWidth				返回元素的可见宽度。
    scrollHeight			返回元素的整体高度。
    scrollWidth				返回元素的整体宽度。
    offsetHeight			返回元素的高度。
    offsetWidth				返回元素的宽度。
    offsetParent			返回元素的偏移容器。
    
    hasAttribute			如果元素拥有指定属性，则返回true，否则返回 false。
    hasAttributes			如果元素拥有属性，则返回 true，否则返回 false。
    hasChildNodes			如果元素拥有子节点，则返回 true，否则 false。
    getAttribute			返回元素节点的指定属性值。
    getAttributeNode 		返回指定属性节点
    setAttribute			把指定属性设置或更改为指定值。
    setAttributeNode		设置或更改指定属性节点。
    removeAttribute			从元素中移除指定属性。
    removeAttributeNode		移除指定的属性节点，并返回被移除的节点。
    
    appendChild				向元素添加新的子节点，作为最后一个子节点。
    nextSibling				返回位于相同节点树层级的下一个节点。
    previousSibling			返回位于相同节点树层级的前一个元素。
    insertBefore			在指定的已有的子节点之前插入新节点。
    replaceChild			替换元素中的子节点。

    childNodes				返回元素子节点的 NodeList。是个数组包括文本节点
    children				返回元素子节点,没有其他多余节点
    firstChild				返回元素的首个子。
    lastChild				返回元素的最后一个子元素。
    parentNode				返回元素的父节点。
    removeChild				从元素中移除子节点。

    nodeName				返回元素的标记名（大写）
    nodeType				返回元素的节点类型。(1.元素,3.文本)
    nodeValue				设置或返回元素值。

    className				设置或返回元素的 class 属性。
    classList				返回元素的类名，作为 DOMTokenList 对象。
        add(c1,c2)				在元素中添加一个或多个类名。
        contains()				返回布尔值，判断指定的类名是否存在。
        remove(c1,c2)			移除元素中一个或多个类名。
        toggle(c)				在元素中切换类名。
    id 						设置或返回元素的 id。
    innerHTML				设置或返回元素的内容。
    style					设置或返回元素的 style 属性。
    tabIndex				设置或返回元素的 tab 键控制次序。
    tagName 				返回元素的标签名。
    textContent				设置或返回节点及其后代的文本内容。
    title					设置或返回元素的 title 属性。
    tabIndex				设置或返回元素的标签顺序。
    tagName 				作为一个字符串返回某个元素的标记名（大写）

    cloneNode				克隆元素。

    事件对象
        鼠标事件
            onclick 			当用户点击某个对象时调用的事件句柄。
            ondblclick 			当用户双击某个对象时调用的事件句柄。
            onmousedown			鼠标按钮被按下。
            onmousemove			鼠标被移动。
            onmouseout			鼠标从某元素移开。
            onmouseover			鼠标移到某元素之上。
            onmouseup			鼠标按键被松开。
            onmouseenter		当鼠标指针移动到元素上时触发。
            onmouseleave		当鼠标指针移出元素时触发
            onhover

            属性
                screenX				返回当某个事件被触发时，鼠标指针的水平坐标。
                screenY				返回当某个事件被触发时，鼠标指针的垂直坐标。
                clientX				返回当事件被触发时，鼠标指针的水平坐标。
                clientY				返回当事件被触发时，鼠标指针的垂直坐标。
                key 				在按下按键时返回按键的标识符。
                keyCode				返回键盘事件触发的键的值的字符代码
                which				返回键盘事件触发的键的值的字符代码

        键盘事件
            onkeydown			某个键盘按键被按下
            onkeypress			某个键盘按键被按下并松开。
            onkeyup				某个键盘按键被松开。

        框架/对象（Frame/Object）事件 (页面事件，生命周期)
            onabort				图像的加载被中断。
            onerror				在加载文档或图像时发生错误。
            onload 				一张页面或一幅图像完成加载。
            onpageshow			该事件在用户访问页面时触发
            onpagehide			该事件在用户离开当前网页跳转到另外一个页面时触发
            onunload			用户退出页面。
            onbeforeunload		该事件在即将离开页面（刷新或关闭）时触发
            onhashchange		该事件在当前 URL 的锚部分发生修改时触发。
            onresize			窗口或框架被重新调整大小。
            onscroll			当文档被滚动时发生的事件。  scrollTo(0,0)返回顶部

        表单事件
            onfocus				元素获得焦点。
            onblur				元素失去焦点。
            onchange			域的内容被改变。
            onsubmit			确认按钮被点击。
            oninput				元素获取用户输入时触发
            onpropertychange	同上，兼容ie
            onfocusin			元素即将获取焦点时触发
            onfocusout			元素即将失去焦点时触发 
            onsearch			用户向搜索域输入文本时触发 ( <input="search">)
            onreset				表单重置时触发
            onselect			用户选取文本时触发 ( <input> 和 <textarea>)

        剪贴板事件
            oncopy				该事件在用户拷贝元素内容时触发
            oncut 				该事件在用户剪切元素内容时触发
            onpaste				该事件在用户粘贴元素内容时触发
        
        打印事件
            onafterprint		该事件在页面已经开始打印，或者打印窗口已经关闭时触发
            onbeforeprint		该事件在页面即将开始打印时触发

        拖动事件
            ondrag 				该事件在元素正在拖动时触发
            ondragend			该事件在用户完成元素的拖动时触发
            ondragenter			该事件在拖动的元素进入放置目标时触发
            ondragleave			该事件在拖动元素离开放置目标时触发
            ondragover			该事件在拖动元素在放置目标上时触发
            ondragstart			该事件在用户开始拖动元素时触发
            ondrop				该事件在拖动元素放置在目标区域时触发

        多媒体（Media）事件
            http://www.runoob.com/jsref/dom-obj-event.html (搜：多媒体（Media）事件)

        动画事件
            animationend 		该事件在 CSS 动画结束播放时触发
            animationiteration 	该事件在 CSS 动画重复播放时触发
            animationstart 		该事件在 CSS 动画开始播放时触发

        过渡事件
            transitionend		该事件在 CSS 完成过渡后触发。

        其他事件
            onwheel				该事件在鼠标滚轮在元素上下滚动时触发
            http://www.runoob.com/jsref/dom-obj-event.html (搜：其他事件)

        方法
            addEventListener() 		允许在目标事件中注册监听事件(IE8 = attachEvent())
            removeEventListener()	运行一次注册在事件目标上的监听事件(IE8 = detachEvent())

            阻止事件
                preventDefault()	通知浏览器不要执行与事件关联的默认动作。
                stopPropagation()	不再派发事件。




        


