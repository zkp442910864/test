
	https://www.jianshu.com/p/42e11515c10f
	https://www.runoob.com/w3cnote/webpack-tutorial.html

	包里（插件）的 package.json 里 main 指向引用的js

	package.json 运行命令
		/*
			package.json 里配置 --mode 三种模式
			none 本地
			development 开发
			progress	生成
			process.env.NODE_ENV 通过 process 这个全局变量取到

			启动命令，添加 --env.NODE_ENV=local 来做标志
			在 webpack.config.js 这样 module.exports = (env) => {} 就能拿到环境变量
		*/
		"scripts": {
			"dev": "webpack-dev-server --env.NODE_ENV=none --mode none --hot --inline --config config/webpack.dev.js",
			"test": "webpack --env.NODE_ENV=development --mode development --progress --config config/webpack.prod.js",
			"build": "webpack --env.NODE_ENV=production --mode production --progress --config config/webpack.prod.js"
		},

	注意：
		module.rules
			配置处理 css
			{
				test: /\.css$/,
				use: [{
					loader: MiniCssExtractPlugin.loader || 'style-loader',
					options: {
						publicPath: '../../' // 这个是修改样式文件里引用的路径
					}
				}, {
					loader: 'css-loader'
				}]
			}

		resolve.alias
			配置快捷路径
			{
				'@file': path.resolve(__dirname, "../src/assets")
			}
			
			js 中： @import "@file/style/theme"
			css module 中： @import "~@file/style/theme"
			css 属性中： background: url("~@file/assets/xxx.jpg")
			html 标签中： <img src="~@file/assets/xxx.jpg" alt="alias">

			https://www.jianshu.com/p/901c7eaed40f
			https://wiki.zthxxx.me/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/Webpack-%E4%B8%AD-css-import-%E4%BD%BF%E7%94%A8-alias-%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/

	安装webpack
		前提:环境需要支持 node.js
		把 webpack 全局安装
		$ npm install webpack -g

	使用
		1.写成模块化，用 module.exports 抛出。
			module.exports = {};

		2.用 require 接收需要用到的模块,直接路径找到对应的文件。
			var n1 = require('./n1.js');

		3.用控制台把js进行合并
			$ webpack n2.js main.js

		4.或者配置 webpack.config.js 文件，运行 $ webpack
		 	如:module.exports = {
				entry:'./js/n2.js',
				output:{
					path:__dirname,
					filename:'./js/b.js'
				},
				module:{
					loaders:[{
						test:/\.css$/,
						loader:'style-loader!css-loader'  //处理引入的css文件
					}]
				}
			};

		5.监听
			$ webpack --watch 可以进行监听，单文件被修改后会自动生成

		6.使用 webpack-dev-server 开发服务，这样我们就能通过 localhost:8080 启动一个 express 静态资源 web 服务器
			安装 $ cnpm install webpack-dev-server -g
			运行 $ webpack-dev-server
			devServer: {
				publicPath: '/',
				// contentBase: path.resolve(__dirname, '..', "src/view"),
				contentBase: false,
				host: '0.0.0.0',
				port: 3333,
				clientLogLevel: 'warning', // 当使用内联模式（内联模式）时，会在开发工具（DevTools）的控制台（控制台）显示消息
				compress: true, // 一切服务都启用gzip压缩
				inline: true,
				hot: true, // 启用webpack的模块热替换特性
				hotOnly: true,
				// allowedHosts: ['test.com'],
				// historyApiFallback: true, // 任意的404响应都被替代为index.html
				// https: true, // 使用了自签名证书
				open: true, // 打开浏览器
				overlay: true, // 在浏览器中显示全屏覆盖层   默认禁用  如果你想要只显示编译器错误,设置为true
				/* proxy: { // 代理 如果你有单独的后端开发服务器API，并且希望在同域名下发送API请求，那么代理某些URL会很有用  貌似会影响速度
					'/api': {
						target: 'http://localhost:3000',
						pathRewrite: { '^/api': '' }, // 如果你不想始终传递/api，则需要重写路径
						secure: false, // 默认情况下，不接受运行在HTTPS上，且使用了无效证书的后端服务器。如果你想要接受，修改配置
					}
				}, */
				quiet: true, // 除了初始启动信息之外的任何内容都不会被打印到控制台。这也意味着来自的WebPack的错误或警告在控制台不可见。
				useLocalIp: true, // 此选项允许浏览器使用本地IP打开。 host 必须改成0.0.0.0
				watchOptions: {
					poll: true
				},
				disableHostCheck: true,
				progress: true,
				// lazy: true
			}





































