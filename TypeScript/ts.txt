


1.创建项目 cnpm init

2.在目录下创建 tsconfig.json
  {
    "compilerOptions": {
        "module": "commonjs",
        "target": "es6",
        "noImplicitAny": false,
        "sourceMap": true,
        "allowJs": true
    },
    "exclude": [
        "node_modules"
    ]
  }
  target：编译之后生成的JavaScript文件需要遵循的标准。有三个候选项：es3、es5、es2015。
  noImplicitAny：为false时，如果编译器无法根据变量的使用来判断类型时，将用any类型代替。为true时，将进行强类型检查，无法推断类型时，提示错误。
  module：遵循的JavaScript模块规范。主要的候选项有：commonjs、AMD和es6。
  removeComments：编译生成的JavaScript文件是否移除注释。
  sourceMap：编译时是否生成对应的source map文件。这个文件主要用于前端调试。当前端js文件被压缩引用后，出错时可借助同名的source map文件查找源文件中错误位置。
  outDir：编译输出JavaScript文件存放的文件夹。
  include、exclude：编译时需要包含/剔除的文件夹。

3.运行 
  1) vs code 任务->配置任务->监视tsconfig.json
    vs code 插件
      Auto Import : 对于一堆组件的我们来说，这货简直贴心，支持JSX和typescript，还有一些细致化的配置参数
      exports autocomplete : 和上个功能类似但是不等同，相当实用
      TypeLens : 类型引用索引展示，用过visual studio的都看到过，相当强大的一个功能；换个名词可能更多人知道，peek file
      TypeScript Import : 专门处理TS内模块导入的，和第一个互补；
      Typings : 这个就是用来处理d.ts的
      AngularDoc for Visual Studio Code : 这个插件可以分析整个项目的依赖生成一个类似思维导图的（经常嗝屁，用了懒加载之后基本不全），
                                          但是有另外一个相当实用的功能就是可以调用angular-cli的新建指令，在侧边栏右键可以直接看到;
  2) 控制台输入 
    tsc && node ./greeter    './greeter'是ts文件路径，不需要后缀
    tsc greeter.ts
    tsc --watch -p 文件   监听文件的变化生成
      