


技巧
	px与rpx之间转换的公式：px = rpx / 750 * wx.getSystemInfoSync().windowWidth;


引用 js 文件
	module.exports = {} 				// 暴露出来的对象
	var common = require('./xxx.js')	// 引用 暴露出来的对象

引用 css 文件
	字体单位用 rpx (设备选iphone6)
	@import "./xxx.wxss"				// wxss 里引用别的样式

app.json 应用的全局配置文件
	https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/file.html
	pages:[]		页面路径的数组
	window:{}		设置小程序的状态栏、导航条、标题以及窗口背景色.
	tabBar:{}		Tab栏可置于顶部或底部
	permission:{}	配置需要授权的接口
	...

app.js 用来注册一个小程序,全局只有一个,全局的数据也可以放到这里面来操作.在别的地方可以获取这个全局唯一的小程序实例 getApp()
	https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html
	可以把工具类在这引入
	生命周期
		onLaunch: function(){},//生命周期函数--监听小程序初始化
		onShow: function(){},//生命周期函数--监听小程序显示
		onHide: function(){},//生命周期函数--监听小程序隐藏
		onError: function(){},//错误监听函数

app.wxss 小程序公共样式表

页面
	生命周期
		onLoad		生命周期函数--监听页面加载
		onReady		生命周期函数--监听页面初次渲染完成
		onShow		生命周期函数--监听页面显示
		onHide		生命周期函数--监听页面隐藏
		onUnload 	生命周期函数--监听页面卸载

	事件
		onPullDownRefresh		页面相关事件处理函数--监听用户下拉动作
		onReachBottom			页面上拉触底事件的处理函数
		onShareAppMessage		用户点击右上角分享

	数据绑定
		<view id="item-{{id}}">{{ str }}</view>

	条件渲染
		wx:if=""
		wx:elif=""
		wx:else

	列表渲染
		wx:for 				表示需要遍历的数据
		wx:key 				使用唯一的字段来标识,有利于提升性能
		wx:for-index 		表示数组的下标
		wx:for-item 		表示数组的元素

	模板
		<template name="objectCombine">
			<view id="item-{{for}}">{{ bar }}</view>
		</template>
		<template is="objectCombine" data="{{for: 1, bar: 2}}"></template>

		提取公共模板 （xxx.wxml）

		引用公共模板
			<import src="./xxx.wxml" />
			<template is="objectCombine" data="{{for: 1, bar: 2}}"></template>

	事件
		bind:			事件绑定不会阻止冒泡事件向上冒泡
		catch:			事件绑定可以阻止冒泡事件向上冒泡
		后面接系统事件
			bind:tap = "fun"		这是点击事件，冒号可省略，默认会携带该控件的一些信息
			
			BaseEvent 基础事件对象属性列表:
				type					事件类型
				timeStamp				事件生成时的时间戳
				target 					触发事件的组件的一些属性值集合
				currentTarget			当前组件的一些属性值集合

			CustomEvent 自定义事件对象属性列表（继承 BaseEvent）:
				detail					额外的信息

			TouchEvent 触摸事件对象属性列表（继承 BaseEvent）:
				touches 				触摸事件,当前停留在屏幕中的触摸点信息的数组
				changedTouches			触摸事件,当前变化的触摸点信息的数组

组件
	https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html
	组件 josn 要设置 {"component": true} 来说明这是组件
	组件 wxss 要用特殊的方法才能用父级的样式
	组件 wxml 和页面同样写法
		<slot></slot> 这个插槽可以把 html 插入进来
		<!-- 组件模板 -->
		<view class="wrapper">
			<view>这里是组件的内部节点</view>
			<slot></slot>
		</view>

		<!-- 引用组件的页面模板 -->
		<component-tag-name>
			<!-- 这部分内容将被放置在组件 <slot> 的位置上 -->
			<view>这里是插入到组件slot中的内容</view>
		</component-tag-name>
	组件 js 用 Component 来创建
		Component({
			data: {}, // 组件的内部属性
			options: {}, // 一些配置项 addGlobalClass、multipleSlots
			properties: { // 组件的对外属性
				a: {
					type: String, 	// 类型
					value: '1',		// 默认值
					observer () {}	// 监听值的变化
				},
				b: Number, // 直接定义类型
			}, 
			methods: {}, // 组件的内部函数
			observers: {}, // 监听数据变化
		});

		生命周期
			created			在组件实例刚刚被创建时执行，注意此时不能调用 setData
			attached		在组件实例进入页面节点树时执行
			ready			在组件布局完成后执行
			moved			在组件实例被移动到节点树另一个位置时执行
			detached		在组件实例被从页面节点树移除时执行
		
		组件获取页面的状态（pageLifetimes: {} 	组件所在页面的生命周期声明对象）
			show			组件所在的页面被展示时执行
			hide			组件所在的页面被隐藏时执行
			resize			组件所在的页面尺寸变化时执行

		通信
			this.triggerEvent('name', val)
				可以调用父组件传进来的自定义函数，第三个参数和冒泡有关
				https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html

		引用组件
			需要在引用页面的 json 里配置
			{"usingComponents": {"component-tag-name": "组建的路径"}}

分包加载 （应该就是懒加载）
	https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html
	小程序必须要有一个主包就是包括 （即放置默认启动页面/TabBar 页面）
	配置 app.json
		"subpackages": [{
			"root": "packageA",
			"pages": ["pages/cat", "pages/dog"]
		}, {
			"root": "packageB",
			"name": "pack2",
			"pages": ["pages/apple", "pages/banana"]
		}]
		root			分包根目录
		name			分包别名，分包预下载时可以使用
		pages			分包页面路径，相对与分包根目录
		independent		分包是否是独立分包







































