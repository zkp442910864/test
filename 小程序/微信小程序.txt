


小程序开发:

	使用微信的ide工具,创建项目会生成3个文件夹、3个文件.
		文件夹
			image 放图片
			pages 放页面,每个页面都有对应的配置文件,可默认(默认就是使用应用的全局配置文件)或配置(配置会覆盖app.json中的配置,并只对当前页面生效)
				*.json 只能对window配置,有两个比较有用的配置项分别是:
					enablePullDownRefresh:是否开启下拉刷新
					disableScroll:只能在page.json配置,禁止页面上下滚动
					其它的都一样

				*.js 
					Page()用来注册一个页面,维护该页面的生命周期以及数据.
						// 页面生命周期的各个阶段
						data:{},							//页面的初始数据
					    onLoad: function(){},				//生命周期函数--监听页面加载
					    onReady: function(){},				//生命周期函数--监听页面初次渲染完成
					    onShow: function(){},				//生命周期函数--监听页面显示
					    onHide: function(){},				//生命周期函数--监听页面隐藏
					    onUnload: function(){},				//生命周期函数--监听页面卸载//生命周期函数--监听页面卸载

					    onPullDownRefresh: function(){},	//页面相关事件处理函数--监听用户下拉动作
					    onReachBottom: function(){},		//页面上拉触底事件的处理函数
					    onShareAppMessage: function(){},	//用户点击右上角分享
					    	title	分享标题
					    	desc 	分享描述
					    	path 	分享路径
					    	例: onShareAppMessage: function () {
								    return {
								      title: '自定义分享标题',
								      desc: '自定义分享描述',
								      path: '/page/user?id=123'
								    }
								}
					    // 自定义函数或者属性

					    页面栈 	不懂
					    	路由就是跳转页面
					    	getCurrentPages() 函数用于获取当前页面栈的实例,以数组形式按栈的顺序给出,第一个元素为首页,最后一个元素为当前页面.
					    	看"小程序页面跳转.jpg"


					    this.setData() 在page中使用,用来改变data里的数据.看74行
					  	例:
					  	Page({
							data: {
								text: "This is page data.",
								aa:"aaa"
							},
							onLoad: function(options) {
								// Do some initialize when page load.
							},
							onReady: function() {
								// Do something when page ready.
							},
							onShow: function() {
								// Do something when page show.
							},
							onHide: function() {
								// Do something when page hide.
							},
							onUnload: function() {
								// Do something when page close.
							},
							onPullDownRefresh: function() {
								// Do something when pull down.
							},
							onReachBottom: function() {
								// Do something when page reach bottom.
							},
							onShareAppMessage: function () {
								// return custom share data when user share.
							},
							// Event handler.
							viewTap: function() {
								this.setData({
									text: 'Set some data for updating view.'
								})
							},
							customData: {
								hi: 'MINA'
							}
						})

			utils

		文件
			app.json 应用的全局配置文件
				pages:页面路径的数组,表示小程序要加载的所有页面,其中数组第一项代表小程序的初始页面.
					小程序中新增/减少页面,都需要对 pages 数组进行修改
					例:{
							"pages":[
							    "pages/index/index"
							]
						}

				window:微信原生功能,定制化不强.可设置小程序的状态栏、导航条、标题以及窗口背景色.
					navigationBarBackgroundColor 	导航栏背景颜色
					navigationBarTextStyle 			导航栏标题颜色
					navigationBarTitleText			导航栏标题文字内容
					backgroundColor 				窗口的背景色
					backgroundTextStyle				下拉背景字体、loading 图的样式,仅支持 dark/light
					enablePullDownRefresh			是否开启下拉刷新
					例:{
							"window":{
								"navigationBarBackgroundColor": "#ffffff",
								"navigationBarTextStyle": "black",
								"navigationBarTitleText": "微信接口功能演示",
								"backgroundColor": "#eeeeee",
								"backgroundTextStyle": "light"
							}
						}

				tabBar:微信原生功能,定制化不强.适用于常规的Tab应用,Tab栏可置于顶部或底部；tabBar是一个数组,仅支持2-5个tab.
					color 					tab 上的文字默认颜色
					selectedColor			tab 上的文字选中时的颜色
					backgroundColor 		tab 的背景色
					borderStyle				tabbar上边框的颜色, 仅支持 black/white

					list					tab 的列表,详见 list 属性说明,最少2个、最多5个 tab
						pagePath 				页面路径,必须在 pages 中先定义
						text 					tab 上按钮文字
						iconPath 				图片路径,icon 大小限制为40kb,建议尺寸为 81px * 81px
						selectedIconPath 		选中时的图片路径,icon 大小限制为40kb,建议尺寸为 81px * 81px

					position				显示的位置,可选值 bottom、top
					例:{
							"tabBar":{
								"color":"black",
								"selectedColor":"#EA5413",
								"backgroundColor":"#3A6EA5",
								"borderStyle":"black",
								"position":"bottom",
								"list":[{
								    "pagePath":"pages/index/index",
								    "text":"一",
								    "iconPath":"image/a38.png",
								    "selectedIconPath":"image/a13.png"
								},{
								    "pagePath":"pages/index2/index2",
								    "text":"二",
								    "iconPath":"image/a38.png",
								    "selectedIconPath":"image/a13.png"
								},{
								    "pagePath":"pages/index3/index3",
								    "text":"三",
								    "iconPath":"image/a38.png",
								    "selectedIconPath":"image/a13.png"
								},{
								    "pagePath":"pages/index4/index4",
								    "text":"四",
								    "iconPath":"image/a38.png",
								    "selectedIconPath":"image/a13.png"
								},{
								    "pagePath":"pages/index5/index5",
								    "text":"五",
								    "iconPath":"image/a38.png",
								    "selectedIconPath":"image/a13.png"
								}]
							}
						}

				networkTimeout:配置小程序网络请求的超时时间.
					request				wx.request的超时时间,单位毫秒,默认为:60000
					connectSocket		wx.connectSocket的超时时间,单位毫秒,默认为:60000
					uploadFile			wx.uploadFile的超时时间,单位毫秒,默认为:60000
					downloadFile		wx.downloadFile的超时时间,单位毫秒,默认为:60000

				debug:调试模式开关,开发模式下建议开启,正式发布别忘了关闭.

			app.js 用来注册一个小程序,全局只有一个,全局的数据也可以放到这里面来操作.在别的地方可以获取这个全局唯一的小程序实例 getApp()
				onLaunch: function(){},//生命周期函数--监听小程序初始化
			    onShow: function(){},//生命周期函数--监听小程序显示
			    onHide: function(){},//生命周期函数--监听小程序隐藏
			    onError: function(){},//错误监听函数
			    // 自定义函数或者属性
			
			app.wxss 小程序公共样式表


	逻辑层(App Service)
		逻辑层将数据进行处理后发送给视图层,同时接受视图层的事件反馈. 在 JavaScript 的基础上,我们做了一些修改,以方便地开发小程序.		
		注册程序,即app.js里的APP()
		注册页面,即pages文件夹里*.js的Page()

		文件作用域:通过全局函数 getApp() 可以获取全局的应用实例,如果需要全局的数据可以在 App() 中设置,如:
			App({
			  	globalData: 1
			})

		模块化:
			我们可以将一些公共的代码抽离成为一个单独的 js 文件,作为一个模块.模块只有通过 module.exports 或者 exports 才能对外暴露接口.
			在需要使用这些模块的文件中,使用 require(path) 将公共代码引入
			例:
				//公共的js
				var com = {
					current:'第一页',
					new_fun:function(name){
						console.log(name + '公共js');
					}
				}
				function sayGoodbye(name) {
				  	console.log(`Goodbye ${name} !`)
				}

				//暴露接口
				module.exports.com = com;
				module.exports.sayGoodbye = sayGoodbye;


				//页面的js
				var common = require('common.js')
				Page({
				  helloMINA: function() {
				    common.sayHello('MINA')
				  },
				  goodbyeMINA: function() {
				    common.sayGoodbye('MINA')
				  }
				})

		API

	视图层:
		WXML模板语法,页面渲染,和所有的模板语言一样,WXML支持数据绑定、条件渲染、循环、模块化等功能.

		数据绑定
			简单绑定
				<view> {{ message }} </view>		
				<view id="item-{{id}}"> </view>		
				<view wx:if="{{condition}}"> </view>
				Page({
				  	data: {
				    	message: 'Hello MINA!',
				    	id:0,
				    	condition:ture,
				  	}
				})

			运算
				<view hidden="{{flag ? true : false}}"> Hidden </view>		//三元运算
				<view> {{a + b}} + {{c}} + d </view>						//算数运算
				<view wx:if="{{length > 5}}"> </view>						//逻辑判断
				<view>{{"hello" + name}}</view>								//字符串运算
				<view>{{object.key}} {{array[0]}}</view>					//数据路径运算
				Page({
				  	data: {
				  		flag:true,
				  		a: 1,
					    b: 2,
					    c: 3,
					    length:6,
					    name: 'MINA',
					    object: {
					      	key: 'Hello '
					    },
				    	array: ['MINA']
				  	}
				})

			数组
				<view wx:for="{{[zero, 1, 2, 3, 4]}}"> {{item}} </view>
				Page({
				  	data: {
				    	zero: 0
				  	}
				})

			对象
				<template is="objectCombine" data="{{for: a, bar: b}}"></template>
				<template is="objectCombine" data="{{...obj1, ...obj2, e: 5}}"></template>		...代表对象,最终组合成的对象是 {a: 1, b: 2, c: 3, d: 4, e: 5}
				<template is="objectCombine" data="{{foo, bar}}"></template>
				Page({
				  	data: {
				    	a: 1,
				    	b: 2,
				    	obj1: {
					      	a: 1,
					      	b: 2
					    },
					    obj2: {
					      	c: 3,
					      	d: 4
					    },
					    foo: 'my-foo',
   						bar: 'my-bar'
				  	}
				})

				上述方式可以随意组合,但是如有存在变量名相同的情况,后边的会覆盖前面,如:
					<template is="objectCombine" data="{{...obj1, ...obj2, a, c: 6}}"></template>
					Page({
					  data: {
					    obj1: {
					      a: 1,
					      b: 2
					    },
					    obj2: {
					      b: 3,
					      c: 4
					    },
					    a: 5
					  }
					})
					最终组合成的对象是 {a: 5, b: 3, c: 6}

		条件渲染
			<view wx:if="{{length > 5}}"> 1 </view>
			<view wx:elif="{{length > 2}}"> 2 </view>
			<view wx:else> 3 </view>

			<block wx:if="{{true}}">
			  	<view> view1 </view>
			  	<view> view2 </view>
			</block>

		列表渲染	不懂
			// wx:for 表示需要遍历的数据
			// wx:key 使用唯一的字段来标识,有利于提升性能
			// wx:for-index 表示数组的下标
			// wx:for-item 表示数组的元素
			<view wx:for="{{array}}">
			  	{{index}}: {{item.message}}
			</view>

			<block wx:for="{{[1, 2, 3]}}">
			  	<view> {{index}}: </view>
			  	<view> {{item}} </view>
			</block>

		模板
		模板拥有自己的作用域,只能使用data传入的数据.
			定义模板
				使用name属性,作为模板的名字.然后在<template/>内定义代码片段,如:
				<template name="msgItem">
				  <view>
				    <text> {{index}}: {{msg}} </text>
				    <text> Time: {{time}} </text>
				  </view>
				</template>

			使用模板
				is 属性可以使用 Mustache 语法,来动态决定具体需要渲染哪个模板
				<template is="msgItem" data="{{...item}}"/>
				Page({
				  data: {
				    item: {
				      index: 0,
				      msg: 'this is a template',
				      time: '2016-09-15'
				    }
				  }
				})

		引用
			组件化
				把公共部分提取出来放到*.wxml,需要时通过include引入.
				include可以将目标文件除了<template/>的整个代码引入，相当于是拷贝到include位置
				<include src="*.wxml"/>

			可复用模板
				把模板都放到*.wxml,需要时通过import引入.
				import可以在该文件中使用目标文件定义的template
				<import src="*.wxml"/>

				使用*.wxml里的template
				<template is="item" data="{{text: 'forbar'}}"/>

		WXSS 
			wxss是一套样式语言，用于描述 WXML 的组件样式。
			尺寸单位
				rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。

			样式导入
				使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束。
				@import "common.wxss";

			全局样式与局部样式
				定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。

		事件
			在组件中绑定一个事件处理函数.
			如bindtap,当用户点击该组件的时候会在该页面对应的Page中找到相应的事件处理函数.
			<view id="tapTest" data-hi="WeChat" bindtap="tapName"> Click me! </view>
			Page({
			  	tapName: function(event) {
			    	console.log(event)
			  	}
			})

			事件分类
				1.冒泡事件:当一个组件上的事件被触发后,该事件会向父节点传递.		
				2.非冒泡事件:当一个组件上的事件被触发后,该事件不会向父节点传递.

				bind事件绑定不会阻止冒泡事件向上冒泡,catch事件绑定可以阻止冒泡事件向上冒泡.

				   类型					触发条件
				touchstart			手指触摸动作开始
				touchmove			手指触摸后移动
				touchcancel			手指触摸动作被打断,如来电提醒,弹窗
				touchend			手指触摸动作结束
				tap 				手指触摸后马上离开
				longtap				手指触摸后,超过350ms再离开

			事件对象
				如无特殊说明,当组件触发事件时,逻辑层绑定该事件的处理函数会收到一个事件对象.
				BaseEvent 基础事件对象属性列表:
					type					事件类型
					timeStamp				事件生成时的时间戳
					target 					触发事件的组件的一些属性值集合
					currentTarget			当前组件的一些属性值集合

				CustomEvent 自定义事件对象属性列表（继承 BaseEvent）:
					detail					额外的信息

				TouchEvent 触摸事件对象属性列表（继承 BaseEvent）:
					touches 				触摸事件,当前停留在屏幕中的触摸点信息的数组
					changedTouches			触摸事件,当前变化的触摸点信息的数组

				特殊事件: <canvas/> 中的触摸事件不可冒泡,所以没有 currentTarget.

		组件






































