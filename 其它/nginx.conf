
# 参考链接
# https://mp.weixin.qq.com/s?__biz=MzA4Nzg0MDM5Nw==&mid=2247485416&idx=2&sn=b93837a62539e8430a1f203893c34ce6&chksm=9032040aa7458d1cc3d94e1caac642d8c9446750be84101240d3f7abf8c339fc5ebf8dfd9def&mpshare=1&scene=24&srcid=&sharer_sharetime=1592886116009&sharer_shareid=cabd4fd34f35c2dfd2bb0b1c865b37ed&key=89e0d01dbcbac2dc14921cb1aff215bf843ced26a1bee9c1135ef82c8a2fa191d544f08301c109b331f06d80183bbb34807583e6c0536480e55eb599a7cbf4494f140095a23d219fb03b81ed966ef7b7cdbb21253c99eb616d3cee1d3e38dff3c34d8f1a8d0d40a77ba96ea91bc3ab5e4c7c55f26ae7fbcc5d6cb66ef842997f&ascene=14&uin=MTI5NTEwMTg4MQ%3D%3D&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=A2M0V01Dq7ZZb2SlusRzBOw%3D&pass_ticket=Ou6rWJaE1L0ujjKGgTKR9LEz8ythBKdmdjVXh87qIsK2LLiwybOZO9%2Bb6yrqPIqX


# 全局变量名	                功能
# $host       	            请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口
# $request_method     	    客户端请求类型，如 GET、POST
# $remote_addr        	    客户端的 IP 地址
# $args       	            请求中的参数
# $arg_PARAMETER      	    GET 请求中变量名 PARAMETER 参数的值，例如：$http_user_agent(Uaer-Agent 值), $http_referer...
# $content_length     	    请求头中的 Content-length 字段
# $http_user_agent          客户端agent信息
# $http_cookie        	    客户端cookie信息
# $remote_addr        	    客户端的IP地址
# $remote_port        	    客户端的端口
# $http_user_agent          客户端agent信息
# $server_protocol          请求使用的协议，如 HTTP/1.0、HTTP/1.1
# $server_addr        	    服务器地址
# $server_name        	    服务器名称
# $server_port        	    服务器的端口号
# $scheme     	            HTTP 方法（如http，https）
# $http_origin



http {

    # 默认off，是否开启gzip
    gzip on;
    # 要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用；
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # 上面两个开启基本就能跑起了，下面的愿意折腾就了解一下
    # 默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容；
    gzip_static on;
    gzip_proxied any;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    # gzip_min_length 1k;
    gzip_http_version 1.1;

    server {
        listen       8088;
		server_name  localhost;

        # 默认会指向nginx 目录下的html 文件夹
        # root "D:/phpstudy_pro/Extensions/Nginx1.15.11/html";
        index "index.html" "404.html";

        # 移动端 指向文件
        # location / {
        #     if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {
        #         root "D:/phpstudy_pro/Extensions/Nginx1.15.11/conf/error";
        #     }
        # }

        # 单页面项目 history 路由配置
        location / {
            root       /usr/share/nginx/html/dist;  # vue 打包后的文件夹
            index      index.html index.htm;
            try_files  $uri$uri/ /index.html @rewrites;

            expires -1;                          # 首页一般没有强制缓存
            add_header Cache-Control no-cache;
        }
        location @rewrites {
            rewrite ^(.+)$ /index.html break;
        }

        # location /qwe {
        #     # 要使用 alias 指定目录
        #     alias "D:/phpstudy_pro/Extensions/Nginx1.15.11/conf/error";
        #     index "504.html";
        # }

        # 把访问 http://localhost:8088/api-yifan 的请求转发到 http://localhost:1235/api-yifan
		# location /api-yifan {
        #     # 配置指向地址
		# 	proxy_pass http://localhost:1235/api-yifan;
        #     # proxy_cookie_domain localhost:1235 localhost:8987;
        #     # proxy_set_header 在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息；
        #     # proxy_connect_timeout 配置 Nginx 与后端代理服务器尝试建立连接的超时时间；
        #     # proxy_read_timeout 配置 Nginx 向后端服务器组发出 read 请求后，等待相应的超时时间；
        #     # proxy_send_timeout 配置 Nginx 向后端服务器组发出 write 请求后，等待相应的超时时间；
        #     # proxy_redirect 用于修改后端服务器返回的响应头中的 Location 和 Refresh。
		# 	# proxy_set_header   X-Forwarded-Proto $scheme;
		# 	# proxy_set_header   Host              "192.168.200.215";
		# 	# proxy_set_header   X-Real-IP         $remote_addr;
		# }
    }

    # 跨域配置
    # 这里是把一个第三方接口，在这里反向代理，然后通过配置，来进行跨域
    server {
        listen       8987;
		server_name  localhost;


        location /api {
			proxy_pass http://192.168.205.75:1235/api;

            add_header 'Access-Control-Allow-Origin' $http_origin;   # 全局变量获得当前请求origin，带cookie的请求不支持*
            add_header 'Access-Control-Allow-Credentials' 'true';    # 为 true 可带上 cookie
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';  # 允许请求方法
            add_header 'Access-Control-Allow-Headers' $http_access_control_request_headers;  # 允许请求的 header，可以为 *
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $http_origin;   # 全局变量获得当前请求origin，带cookie的请求不支持*
                add_header 'Access-Control-Allow-Credentials' 'true';    # 为 true 可带上 cookie
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';  # 允许请求方法
                add_header 'Access-Control-Allow-Headers' $http_access_control_request_headers;  # 允许请求的 header，可以为 *
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

                add_header 'Access-Control-Max-Age' 1728000;   # OPTIONS 请求的有效期，在有效期内不用发出另一条预检请求
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;                  # 200 也可以
            }
        }
    }

}
